
GPIO_Driver_BSRR_BRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c4c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000d7c  08000d7c  00010d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dcc  08000dcc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000dcc  08000dcc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dcc  08000dcc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08000dd8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000dd8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001337  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000062e  00000000  00000000  00021364  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c8  00000000  00000000  00021998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00021b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001a24  00000000  00000000  00021cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000d4b  00000000  00000000  000236e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007706  00000000  00000000  0002442f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002bb35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000060c  00000000  00000000  0002bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d64 	.word	0x08000d64

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000d64 	.word	0x08000d64

08000170 <__clear_cache>:
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop

08000174 <ADC_voidInit>:
#include"ADC_Private.h"
#include"ADC_Config.h"


static volatile u16 AD_val ;
void 	ADC_voidInit(void){
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0

#if RCC_ADC_CLKConfig == PCLK2_divided_by_2
	CLR_BIT( RCC_CFGR , 14 );
 8000178:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <ADC_voidInit+0x30>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a09      	ldr	r2, [pc, #36]	; (80001a4 <ADC_voidInit+0x30>)
 800017e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000182:	6013      	str	r3, [r2, #0]
	CLR_BIT( RCC_CFGR , 15 );
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <ADC_voidInit+0x30>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <ADC_voidInit+0x30>)
 800018a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800018e:	6013      	str	r3, [r2, #0]
	SET_BIT( RCC_CFGR , 15 );
#endif

	/*  Data alignment right/left */
#if ADC_DataAlign == Right
	CLR_BIT( ADC->CR2 , 11 );
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <ADC_voidInit+0x34>)
 8000192:	689b      	ldr	r3, [r3, #8]
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <ADC_voidInit+0x34>)
 8000196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800019a:	6093      	str	r3, [r2, #8]
#elif ADC_DataAlign == Left
	SET_BIT( ADC->CR2 , 11 );
#endif
}
 800019c:	bf00      	nop
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021004 	.word	0x40021004
 80001a8:	40012400 	.word	0x40012400

080001ac <ADC_voidEnable>:

void    ADC_voidEnable(){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	SET_BIT(ADC->CR2,0);
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <ADC_voidEnable+0x18>)
 80001b2:	689b      	ldr	r3, [r3, #8]
 80001b4:	4a03      	ldr	r2, [pc, #12]	; (80001c4 <ADC_voidEnable+0x18>)
 80001b6:	f043 0301 	orr.w	r3, r3, #1
 80001ba:	6093      	str	r3, [r2, #8]
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	40012400 	.word	0x40012400

080001c8 <ADC_voidMode>:
void    ADC_voidDisable(){
	CLR_BIT(ADC->CR2,0);
}
/*  mode set to be continuous conversion/clear to be single conversion */
void    ADC_voidMode(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	CLR_BIT(ADC->CR2,1);
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <ADC_voidMode+0x18>)
 80001ce:	689b      	ldr	r3, [r3, #8]
 80001d0:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <ADC_voidMode+0x18>)
 80001d2:	f023 0302 	bic.w	r3, r3, #2
 80001d6:	6093      	str	r3, [r2, #8]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40012400 	.word	0x40012400

080001e4 <ADC_voidResetCalAndCal>:
void    ADC_voidResetCalAndCal(){
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	SET_BIT(ADC->CR2,3);
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <ADC_voidResetCalAndCal+0x50>)
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	4a11      	ldr	r2, [pc, #68]	; (8000234 <ADC_voidResetCalAndCal+0x50>)
 80001ee:	f043 0308 	orr.w	r3, r3, #8
 80001f2:	6093      	str	r3, [r2, #8]
	while(GET_BIT(ADC->CR2,3));
 80001f4:	bf00      	nop
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <ADC_voidResetCalAndCal+0x50>)
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	08db      	lsrs	r3, r3, #3
 80001fc:	f003 0301 	and.w	r3, r3, #1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d1f8      	bne.n	80001f6 <ADC_voidResetCalAndCal+0x12>
	SET_BIT(ADC->CR2,2);
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <ADC_voidResetCalAndCal+0x50>)
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <ADC_voidResetCalAndCal+0x50>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6093      	str	r3, [r2, #8]
		while(GET_BIT(ADC->CR2,2));
 8000210:	bf00      	nop
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <ADC_voidResetCalAndCal+0x50>)
 8000214:	689b      	ldr	r3, [r3, #8]
 8000216:	089b      	lsrs	r3, r3, #2
 8000218:	f003 0301 	and.w	r3, r3, #1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d1f8      	bne.n	8000212 <ADC_voidResetCalAndCal+0x2e>

		SET_BIT(ADC->CR2,0);  // start conversion
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <ADC_voidResetCalAndCal+0x50>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a03      	ldr	r2, [pc, #12]	; (8000234 <ADC_voidResetCalAndCal+0x50>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6093      	str	r3, [r2, #8]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40012400 	.word	0x40012400

08000238 <Adc_voidReadADC>:

u16	Adc_voidReadADC(channel_t Channel,u8 Copy_u8SampleTime_Cycles)

	{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	4613      	mov	r3, r2
 8000246:	71bb      	strb	r3, [r7, #6]
	ADC->SQR1 = 0x00000000;  // Regular channel single conversion
 8000248:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <Adc_voidReadADC+0x8c>)
 800024a:	2200      	movs	r2, #0
 800024c:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC->SQR2 = 0x00000000; // Clear register
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <Adc_voidReadADC+0x8c>)
 8000250:	2200      	movs	r2, #0
 8000252:	631a      	str	r2, [r3, #48]	; 0x30
	ADC->SQR3 = (Channel<<0);  // channel seq as 1st conversion
 8000254:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <Adc_voidReadADC+0x8c>)
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	6353      	str	r3, [r2, #52]	; 0x34

		/*	To deal with Bit Masking 1- Clear a specific Bits 2- Assign a specific Bits	*/
		ADC->SMPR2 &= ~((u32)(0b111)<<(Channel * 3));
 800025a:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <Adc_voidReadADC+0x8c>)
 800025c:	6919      	ldr	r1, [r3, #16]
 800025e:	79fa      	ldrb	r2, [r7, #7]
 8000260:	4613      	mov	r3, r2
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	4413      	add	r3, r2
 8000266:	2207      	movs	r2, #7
 8000268:	fa02 f303 	lsl.w	r3, r2, r3
 800026c:	43db      	mvns	r3, r3
 800026e:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <Adc_voidReadADC+0x8c>)
 8000270:	400b      	ands	r3, r1
 8000272:	6113      	str	r3, [r2, #16]
		ADC->SMPR2 |=  ((u32)(Copy_u8SampleTime_Cycles)<<(Channel * 3));
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <Adc_voidReadADC+0x8c>)
 8000276:	6919      	ldr	r1, [r3, #16]
 8000278:	79b8      	ldrb	r0, [r7, #6]
 800027a:	79fa      	ldrb	r2, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	4413      	add	r3, r2
 8000282:	fa00 f303 	lsl.w	r3, r0, r3
 8000286:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <Adc_voidReadADC+0x8c>)
 8000288:	430b      	orrs	r3, r1
 800028a:	6113      	str	r3, [r2, #16]

		if (ADC->SR & (1 << 1)) { // If conversion has finished (Check EOC bit)
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <Adc_voidReadADC+0x8c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 0302 	and.w	r3, r3, #2
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00d      	beq.n	80002b4 <Adc_voidReadADC+0x7c>
		AD_val = ADC->DR & 0x0FFF; // Read AD converted value
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <Adc_voidReadADC+0x8c>)
 800029a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029c:	b29b      	uxth	r3, r3
 800029e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <Adc_voidReadADC+0x90>)
 80002a6:	801a      	strh	r2, [r3, #0]

		SET_BIT(ADC->CR2,0); // Start new conversion
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <Adc_voidReadADC+0x8c>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <Adc_voidReadADC+0x8c>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6093      	str	r3, [r2, #8]
		}
		return AD_val;
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <Adc_voidReadADC+0x90>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	b29b      	uxth	r3, r3
	}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40012400 	.word	0x40012400
 80002c8:	20000020 	.word	0x20000020

080002cc <DIO_voidSetPinDirection>:



/*void	DIO_voidSetPinDirection(port,pin,mode);*/
void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8Mode)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
 80002d6:	460b      	mov	r3, r1
 80002d8:	71bb      	strb	r3, [r7, #6]
 80002da:	4613      	mov	r3, r2
 80002dc:	717b      	strb	r3, [r7, #5]
	/*		Range Check							*/
	if( (Copy_u8PortID<3) && (Copy_u8PinID<16) )
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	f200 80a2 	bhi.w	800042a <DIO_voidSetPinDirection+0x15e>
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	f200 809e 	bhi.w	800042a <DIO_voidSetPinDirection+0x15e>
	{
		switch(Copy_u8PortID)
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d036      	beq.n	8000362 <DIO_voidSetPinDirection+0x96>
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d066      	beq.n	80003c6 <DIO_voidSetPinDirection+0xfa>
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d000      	beq.n	80002fe <DIO_voidSetPinDirection+0x32>
			}
			break;
		}
	}else{/*	Return ERROR	*/}

}
 80002fc:	e095      	b.n	800042a <DIO_voidSetPinDirection+0x15e>
			if( Copy_u8PinID < 8 )
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	2b07      	cmp	r3, #7
 8000302:	d815      	bhi.n	8000330 <DIO_voidSetPinDirection+0x64>
				GPIOA_CRL &= ~((u32)(0b1111)<<(Copy_u8PinID * 4));
 8000304:	4b4b      	ldr	r3, [pc, #300]	; (8000434 <DIO_voidSetPinDirection+0x168>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	210f      	movs	r1, #15
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	43db      	mvns	r3, r3
 8000314:	4947      	ldr	r1, [pc, #284]	; (8000434 <DIO_voidSetPinDirection+0x168>)
 8000316:	4013      	ands	r3, r2
 8000318:	600b      	str	r3, [r1, #0]
				GPIOA_CRL |=  ((u32)(Copy_u8Mode)<<(Copy_u8PinID * 4));
 800031a:	4b46      	ldr	r3, [pc, #280]	; (8000434 <DIO_voidSetPinDirection+0x168>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	7979      	ldrb	r1, [r7, #5]
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	fa01 f303 	lsl.w	r3, r1, r3
 8000328:	4942      	ldr	r1, [pc, #264]	; (8000434 <DIO_voidSetPinDirection+0x168>)
 800032a:	4313      	orrs	r3, r2
 800032c:	600b      	str	r3, [r1, #0]
			break;
 800032e:	e07c      	b.n	800042a <DIO_voidSetPinDirection+0x15e>
				Copy_u8PinID -= 8 ;
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	3b08      	subs	r3, #8
 8000334:	71bb      	strb	r3, [r7, #6]
				GPIOA_CRH &= ~((u32)(0b1111)<<(Copy_u8PinID * 4));
 8000336:	4b40      	ldr	r3, [pc, #256]	; (8000438 <DIO_voidSetPinDirection+0x16c>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	210f      	movs	r1, #15
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	493c      	ldr	r1, [pc, #240]	; (8000438 <DIO_voidSetPinDirection+0x16c>)
 8000348:	4013      	ands	r3, r2
 800034a:	600b      	str	r3, [r1, #0]
				GPIOA_CRH |=  ((u32)(Copy_u8Mode)<<(Copy_u8PinID * 4));
 800034c:	4b3a      	ldr	r3, [pc, #232]	; (8000438 <DIO_voidSetPinDirection+0x16c>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	7979      	ldrb	r1, [r7, #5]
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	4937      	ldr	r1, [pc, #220]	; (8000438 <DIO_voidSetPinDirection+0x16c>)
 800035c:	4313      	orrs	r3, r2
 800035e:	600b      	str	r3, [r1, #0]
			break;
 8000360:	e063      	b.n	800042a <DIO_voidSetPinDirection+0x15e>
			if( Copy_u8PinID < 8 )
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2b07      	cmp	r3, #7
 8000366:	d815      	bhi.n	8000394 <DIO_voidSetPinDirection+0xc8>
				GPIOB_CRL &= ~((u32)(0b1111)<<(Copy_u8PinID * 4));
 8000368:	4b34      	ldr	r3, [pc, #208]	; (800043c <DIO_voidSetPinDirection+0x170>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	210f      	movs	r1, #15
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	4930      	ldr	r1, [pc, #192]	; (800043c <DIO_voidSetPinDirection+0x170>)
 800037a:	4013      	ands	r3, r2
 800037c:	600b      	str	r3, [r1, #0]
				GPIOB_CRL |=  ((u32)(Copy_u8Mode)<<(Copy_u8PinID * 4));
 800037e:	4b2f      	ldr	r3, [pc, #188]	; (800043c <DIO_voidSetPinDirection+0x170>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	7979      	ldrb	r1, [r7, #5]
 8000384:	79bb      	ldrb	r3, [r7, #6]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	492b      	ldr	r1, [pc, #172]	; (800043c <DIO_voidSetPinDirection+0x170>)
 800038e:	4313      	orrs	r3, r2
 8000390:	600b      	str	r3, [r1, #0]
			break;
 8000392:	e04a      	b.n	800042a <DIO_voidSetPinDirection+0x15e>
				Copy_u8PinID -= 8 ;
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	3b08      	subs	r3, #8
 8000398:	71bb      	strb	r3, [r7, #6]
				GPIOB_CRH &= ~((u32)(0b1111)<<(Copy_u8PinID * 4));
 800039a:	4b29      	ldr	r3, [pc, #164]	; (8000440 <DIO_voidSetPinDirection+0x174>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	79bb      	ldrb	r3, [r7, #6]
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	210f      	movs	r1, #15
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	4925      	ldr	r1, [pc, #148]	; (8000440 <DIO_voidSetPinDirection+0x174>)
 80003ac:	4013      	ands	r3, r2
 80003ae:	600b      	str	r3, [r1, #0]
				GPIOB_CRH |=  ((u32)(Copy_u8Mode)<<(Copy_u8PinID * 4));
 80003b0:	4b23      	ldr	r3, [pc, #140]	; (8000440 <DIO_voidSetPinDirection+0x174>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	7979      	ldrb	r1, [r7, #5]
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	4920      	ldr	r1, [pc, #128]	; (8000440 <DIO_voidSetPinDirection+0x174>)
 80003c0:	4313      	orrs	r3, r2
 80003c2:	600b      	str	r3, [r1, #0]
			break;
 80003c4:	e031      	b.n	800042a <DIO_voidSetPinDirection+0x15e>
			if( Copy_u8PinID < 8 )
 80003c6:	79bb      	ldrb	r3, [r7, #6]
 80003c8:	2b07      	cmp	r3, #7
 80003ca:	d815      	bhi.n	80003f8 <DIO_voidSetPinDirection+0x12c>
				GPIOC_CRL &= ~((u32)(0b1111)<<(Copy_u8PinID * 4));
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <DIO_voidSetPinDirection+0x178>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	210f      	movs	r1, #15
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	4919      	ldr	r1, [pc, #100]	; (8000444 <DIO_voidSetPinDirection+0x178>)
 80003de:	4013      	ands	r3, r2
 80003e0:	600b      	str	r3, [r1, #0]
				GPIOC_CRL |=  ((u32)(Copy_u8Mode)<<(Copy_u8PinID * 4));
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <DIO_voidSetPinDirection+0x178>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	7979      	ldrb	r1, [r7, #5]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	fa01 f303 	lsl.w	r3, r1, r3
 80003f0:	4914      	ldr	r1, [pc, #80]	; (8000444 <DIO_voidSetPinDirection+0x178>)
 80003f2:	4313      	orrs	r3, r2
 80003f4:	600b      	str	r3, [r1, #0]
			break;
 80003f6:	e018      	b.n	800042a <DIO_voidSetPinDirection+0x15e>
				Copy_u8PinID -= 8 ;
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	3b08      	subs	r3, #8
 80003fc:	71bb      	strb	r3, [r7, #6]
				GPIOC_CRH &= ~((u32)(0b1111)<<(Copy_u8PinID * 4));
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <DIO_voidSetPinDirection+0x17c>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	210f      	movs	r1, #15
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	490e      	ldr	r1, [pc, #56]	; (8000448 <DIO_voidSetPinDirection+0x17c>)
 8000410:	4013      	ands	r3, r2
 8000412:	600b      	str	r3, [r1, #0]
				GPIOC_CRH |=  ((u32)(Copy_u8Mode)<<(Copy_u8PinID * 4));
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <DIO_voidSetPinDirection+0x17c>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	7979      	ldrb	r1, [r7, #5]
 800041a:	79bb      	ldrb	r3, [r7, #6]
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	4909      	ldr	r1, [pc, #36]	; (8000448 <DIO_voidSetPinDirection+0x17c>)
 8000424:	4313      	orrs	r3, r2
 8000426:	600b      	str	r3, [r1, #0]
			break;
 8000428:	bf00      	nop
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40010800 	.word	0x40010800
 8000438:	40010804 	.word	0x40010804
 800043c:	40010c00 	.word	0x40010c00
 8000440:	40010c04 	.word	0x40010c04
 8000444:	40011000 	.word	0x40011000
 8000448:	40011004 	.word	0x40011004

0800044c <DIO_voidSetPinValue>:
	}else{/*	Return ERROR	*/}
}

/*		if Pin is Output (High or Low)	*/
void	DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8Value)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
 8000456:	460b      	mov	r3, r1
 8000458:	71bb      	strb	r3, [r7, #6]
 800045a:	4613      	mov	r3, r2
 800045c:	717b      	strb	r3, [r7, #5]
	/*		Range Check							*/
	if( (Copy_u8PortID<3) && (Copy_u8PinID<16) )
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d864      	bhi.n	800052e <DIO_voidSetPinValue+0xe2>
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	2b0f      	cmp	r3, #15
 8000468:	d861      	bhi.n	800052e <DIO_voidSetPinValue+0xe2>
	{
		switch(Copy_u8PortID)
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d022      	beq.n	80004b6 <DIO_voidSetPinValue+0x6a>
 8000470:	2b02      	cmp	r3, #2
 8000472:	d03e      	beq.n	80004f2 <DIO_voidSetPinValue+0xa6>
 8000474:	2b00      	cmp	r3, #0
 8000476:	d000      	beq.n	800047a <DIO_voidSetPinValue+0x2e>
					default:;	/*		Return ERROR		*/
					}
					break;
		}
	}else{/*	Return ERROR	*/}
}
 8000478:	e059      	b.n	800052e <DIO_voidSetPinValue+0xe2>
			switch(Copy_u8Value)
 800047a:	797b      	ldrb	r3, [r7, #5]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d00d      	beq.n	800049c <DIO_voidSetPinValue+0x50>
 8000480:	2b01      	cmp	r3, #1
 8000482:	d000      	beq.n	8000486 <DIO_voidSetPinValue+0x3a>
			break;
 8000484:	e053      	b.n	800052e <DIO_voidSetPinValue+0xe2>
			case DIO_U8_HIGH:	SET_BIT(GPIOA_ODR , Copy_u8PinID);	break;
 8000486:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <DIO_voidSetPinValue+0xec>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	79ba      	ldrb	r2, [r7, #6]
 800048c:	2101      	movs	r1, #1
 800048e:	fa01 f202 	lsl.w	r2, r1, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a28      	ldr	r2, [pc, #160]	; (8000538 <DIO_voidSetPinValue+0xec>)
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
 800049a:	e00b      	b.n	80004b4 <DIO_voidSetPinValue+0x68>
			case DIO_U8_LOW	:	CLR_BIT(GPIOA_ODR , Copy_u8PinID);	break;
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <DIO_voidSetPinValue+0xec>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	79ba      	ldrb	r2, [r7, #6]
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a22      	ldr	r2, [pc, #136]	; (8000538 <DIO_voidSetPinValue+0xec>)
 80004ae:	400b      	ands	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	bf00      	nop
			break;
 80004b4:	e03b      	b.n	800052e <DIO_voidSetPinValue+0xe2>
				switch(Copy_u8Value)
 80004b6:	797b      	ldrb	r3, [r7, #5]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d00d      	beq.n	80004d8 <DIO_voidSetPinValue+0x8c>
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d000      	beq.n	80004c2 <DIO_voidSetPinValue+0x76>
				break;
 80004c0:	e035      	b.n	800052e <DIO_voidSetPinValue+0xe2>
				case DIO_U8_HIGH:	SET_BIT(GPIOB_ODR , Copy_u8PinID);	break;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <DIO_voidSetPinValue+0xf0>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	79ba      	ldrb	r2, [r7, #6]
 80004c8:	2101      	movs	r1, #1
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a1a      	ldr	r2, [pc, #104]	; (800053c <DIO_voidSetPinValue+0xf0>)
 80004d2:	430b      	orrs	r3, r1
 80004d4:	6013      	str	r3, [r2, #0]
 80004d6:	e00b      	b.n	80004f0 <DIO_voidSetPinValue+0xa4>
				case DIO_U8_LOW	:	CLR_BIT(GPIOB_ODR , Copy_u8PinID);	break;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <DIO_voidSetPinValue+0xf0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	79ba      	ldrb	r2, [r7, #6]
 80004de:	2101      	movs	r1, #1
 80004e0:	fa01 f202 	lsl.w	r2, r1, r2
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <DIO_voidSetPinValue+0xf0>)
 80004ea:	400b      	ands	r3, r1
 80004ec:	6013      	str	r3, [r2, #0]
 80004ee:	bf00      	nop
				break;
 80004f0:	e01d      	b.n	800052e <DIO_voidSetPinValue+0xe2>
					switch(Copy_u8Value)
 80004f2:	797b      	ldrb	r3, [r7, #5]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00d      	beq.n	8000514 <DIO_voidSetPinValue+0xc8>
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d000      	beq.n	80004fe <DIO_voidSetPinValue+0xb2>
					break;
 80004fc:	e017      	b.n	800052e <DIO_voidSetPinValue+0xe2>
					case DIO_U8_HIGH:	SET_BIT(GPIOC_ODR , Copy_u8PinID);	break;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <DIO_voidSetPinValue+0xf4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <DIO_voidSetPinValue+0xf4>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6013      	str	r3, [r2, #0]
 8000512:	e00b      	b.n	800052c <DIO_voidSetPinValue+0xe0>
					case DIO_U8_LOW	:	CLR_BIT(GPIOC_ODR , Copy_u8PinID);	break;
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <DIO_voidSetPinValue+0xf4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	79ba      	ldrb	r2, [r7, #6]
 800051a:	2101      	movs	r1, #1
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	43d2      	mvns	r2, r2
 8000522:	4611      	mov	r1, r2
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <DIO_voidSetPinValue+0xf4>)
 8000526:	400b      	ands	r3, r1
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	bf00      	nop
					break;
 800052c:	bf00      	nop
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	4001080c 	.word	0x4001080c
 800053c:	40010c0c 	.word	0x40010c0c
 8000540:	4001100c 	.word	0x4001100c

08000544 <_delay_ms>:
#include "LCD_config.h"



void _delay_ms(u32 copy_u32time)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	for(u32 i=0;i<copy_u32time;i++)
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	e00d      	b.n	800056e <_delay_ms+0x2a>
	{
		for(u16 j=0;j<565;j++)
 8000552:	2300      	movs	r3, #0
 8000554:	817b      	strh	r3, [r7, #10]
 8000556:	e003      	b.n	8000560 <_delay_ms+0x1c>
		{
			asm("NOP");
 8000558:	bf00      	nop
		for(u16 j=0;j<565;j++)
 800055a:	897b      	ldrh	r3, [r7, #10]
 800055c:	3301      	adds	r3, #1
 800055e:	817b      	strh	r3, [r7, #10]
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 8000566:	d9f7      	bls.n	8000558 <_delay_ms+0x14>
	for(u32 i=0;i<copy_u32time;i++)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	429a      	cmp	r2, r3
 8000574:	d3ed      	bcc.n	8000552 <_delay_ms+0xe>
		}
	}
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <LCD_vidInit>:


void LCD_vidInit( void )
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* wait 35 */
	_delay_ms(35);
 8000584:	2023      	movs	r0, #35	; 0x23
 8000586:	f7ff ffdd 	bl	8000544 <_delay_ms>

	/*  function set */

	LCD_vidSendCmd(0b00111000);
 800058a:	2038      	movs	r0, #56	; 0x38
 800058c:	f000 f818 	bl	80005c0 <LCD_vidSendCmd>
	/* wait 1 */
	_delay_ms(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff ffd7 	bl	8000544 <_delay_ms>

	/*  function set (on/off) */
	LCD_vidSendCmd(0b00001100);
 8000596:	200c      	movs	r0, #12
 8000598:	f000 f812 	bl	80005c0 <LCD_vidSendCmd>
	/* wait 1 */
	_delay_ms(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ffd1 	bl	8000544 <_delay_ms>
	/*LCD_vidSendCmd(0b00000001);*/
	/*	 wait 2                  */
	/*_delay_ms(2);	             */
	/*****************************/

	LCD_vidClear();
 80005a2:	f000 f8ce 	bl	8000742 <LCD_vidClear>

	/*  function set (Entry mode set - cursor increase or decrease ) */
	LCD_vidSendCmd(0b00000110);
 80005a6:	2006      	movs	r0, #6
 80005a8:	f000 f80a 	bl	80005c0 <LCD_vidSendCmd>
	/* wait 2 */
	_delay_ms(2);
 80005ac:	2002      	movs	r0, #2
 80005ae:	f7ff ffc9 	bl	8000544 <_delay_ms>

	/* latch = 0 */
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8EN , DIO_U8_LOW );
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ff48 	bl	800044c <DIO_voidSetPinValue>

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <LCD_vidSendCmd>:

void LCD_vidSendCmd( u8 u8CmdCpy )
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	/** to send command  ( RS = 0 and R/W = 0 ) =====> (write instruction) */

	/* RS  0 CMD */  
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8RS , DIO_U8_LOW );
 80005ca:	2200      	movs	r2, #0
 80005cc:	210b      	movs	r1, #11
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ff3c 	bl	800044c <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( DIO_U8_PORTA,LCD_u8RW , DIO_U8_LOW );
 80005d4:	2200      	movs	r2, #0
 80005d6:	210c      	movs	r1, #12
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff ff37 	bl	800044c <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CmdCpy);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f81b 	bl	800061c <vidPutOnBus>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <LCD_vidWriteChar>:

void LCD_vidWriteChar( u8 u8CharCpy )
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
	/** to write command   ( RS = 1 and R/W = 0 ) =====> (write to DR Reg) */

	/* RS  1 CMD */
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8RS , DIO_U8_HIGH );
 80005f8:	2201      	movs	r2, #1
 80005fa:	210b      	movs	r1, #11
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ff25 	bl	800044c <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8RW , DIO_U8_LOW );
 8000602:	2200      	movs	r2, #0
 8000604:	210c      	movs	r1, #12
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff ff20 	bl	800044c <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f804 	bl	800061c <vidPutOnBus>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <vidPutOnBus>:

static void vidPutOnBus( u8 u8CmdDataCpy )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	u8 LOC_u8Loop = LCD_DATA_D0_START ;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]

	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8DATA_0 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 800062a:	79fa      	ldrb	r2, [r7, #7]
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	1c59      	adds	r1, r3, #1
 8000630:	73f9      	strb	r1, [r7, #15]
 8000632:	fa42 f303 	asr.w	r3, r2, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	2103      	movs	r1, #3
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ff02 	bl	800044c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8DATA_1 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	1c59      	adds	r1, r3, #1
 800064e:	73f9      	strb	r1, [r7, #15]
 8000650:	fa42 f303 	asr.w	r3, r2, r3
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	2104      	movs	r1, #4
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff fef3 	bl	800044c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8DATA_2 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 8000666:	79fa      	ldrb	r2, [r7, #7]
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	1c59      	adds	r1, r3, #1
 800066c:	73f9      	strb	r1, [r7, #15]
 800066e:	fa42 f303 	asr.w	r3, r2, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	2105      	movs	r1, #5
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fee4 	bl	800044c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8DATA_3 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	1c59      	adds	r1, r3, #1
 800068a:	73f9      	strb	r1, [r7, #15]
 800068c:	fa42 f303 	asr.w	r3, r2, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	461a      	mov	r2, r3
 800069a:	2106      	movs	r1, #6
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fed5 	bl	800044c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8DATA_4 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	1c59      	adds	r1, r3, #1
 80006a8:	73f9      	strb	r1, [r7, #15]
 80006aa:	fa42 f303 	asr.w	r3, r2, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	2107      	movs	r1, #7
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff fec6 	bl	800044c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8DATA_5 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	1c59      	adds	r1, r3, #1
 80006c6:	73f9      	strb	r1, [r7, #15]
 80006c8:	fa42 f303 	asr.w	r3, r2, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	2108      	movs	r1, #8
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff feb7 	bl	800044c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8DATA_6 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	1c59      	adds	r1, r3, #1
 80006e4:	73f9      	strb	r1, [r7, #15]
 80006e6:	fa42 f303 	asr.w	r3, r2, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	2109      	movs	r1, #9
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fea8 	bl	800044c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8DATA_7 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	1c59      	adds	r1, r3, #1
 8000702:	73f9      	strb	r1, [r7, #15]
 8000704:	fa42 f303 	asr.w	r3, r2, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	210a      	movs	r1, #10
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fe99 	bl	800044c <DIO_voidSetPinValue>

	/* Latch  */
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8EN , DIO_U8_HIGH );
 800071a:	2201      	movs	r2, #1
 800071c:	2102      	movs	r1, #2
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff fe94 	bl	800044c <DIO_voidSetPinValue>
	_delay_ms(2);
 8000724:	2002      	movs	r0, #2
 8000726:	f7ff ff0d 	bl	8000544 <_delay_ms>
	DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8EN , DIO_U8_LOW );
 800072a:	2200      	movs	r2, #0
 800072c:	2102      	movs	r1, #2
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff fe8c 	bl	800044c <DIO_voidSetPinValue>
	_delay_ms(2);
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff ff05 	bl	8000544 <_delay_ms>

}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <LCD_vidClear>:

void LCD_vidClear( void )
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
	/*  function set (Clear  Display) */
	LCD_vidSendCmd(0b00000001);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff3a 	bl	80005c0 <LCD_vidSendCmd>
	/* wait 2 */
	_delay_ms(2);
 800074c:	2002      	movs	r0, #2
 800074e:	f7ff fef9 	bl	8000544 <_delay_ms>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}

08000756 <LCD_vidGotoXY>:


void LCD_vidGotoXY( u8 u8LineNbCpy , u8 u8CharNbCpy )
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	460a      	mov	r2, r1
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	4613      	mov	r3, r2
 8000764:	71bb      	strb	r3, [r7, #6]
	/* switch case over line */
	if(  u8LineNbCpy == 1 )
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d106      	bne.n	800077a <LCD_vidGotoXY+0x24>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_FIRST_LINE + u8CharNbCpy) );
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	3b80      	subs	r3, #128	; 0x80
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff24 	bl	80005c0 <LCD_vidSendCmd>
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );

	}


}
 8000778:	e008      	b.n	800078c <LCD_vidGotoXY+0x36>
	else if( u8LineNbCpy == 2 )
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d105      	bne.n	800078c <LCD_vidGotoXY+0x36>
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	3b40      	subs	r3, #64	; 0x40
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff1a 	bl	80005c0 <LCD_vidSendCmd>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <LCD_vidWriteString>:


/* Write string */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	u8 Loc_u8Counter = 0 ;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]

	while(pu8StringCpy[Loc_u8Counter] !='\0')
 80007a0:	e009      	b.n	80007b6 <LCD_vidWriteString+0x22>
	{
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff1f 	bl	80005ee <LCD_vidWriteChar>
		Loc_u8Counter++;		
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	3301      	adds	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1ef      	bne.n	80007a2 <LCD_vidWriteString+0xe>
	}


}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <RCC_voidInit>:
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_voidInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
	u32 LOCAL_u32TIMEOUT =0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]

#endif

	/*  PLL ENTRY SOURCE IS HSE DIVISON/2 OR NOT  */
#if  RCC_PLL_SOURCE_HSE == HSE_DEVIDE_TWO
	CLR_BIT(RCC_CR,24);
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <RCC_voidInit+0x70>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <RCC_voidInit+0x70>)
 80007dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007e0:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC_CFGR,17);
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <RCC_voidInit+0x74>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <RCC_voidInit+0x74>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC_CFGR,21);

#endif

	/*  PLL ON   */
	SET_BIT(RCC_CR,24);
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <RCC_voidInit+0x70>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <RCC_voidInit+0x70>)
 80007f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007f8:	6013      	str	r3, [r2, #0]
	/*  SYSTEM_CLOCK_SWITCH   */
	CLR_BIT(RCC_CFGR,0);
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <RCC_voidInit+0x74>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <RCC_voidInit+0x74>)
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC_CFGR,1);
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <RCC_voidInit+0x74>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <RCC_voidInit+0x74>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6013      	str	r3, [r2, #0]


	/*  PLL READY   */
	while((GET_BIT(RCC_CR,25))==0 && LOCAL_u32TIMEOUT!=10000){
 8000812:	e002      	b.n	800081a <RCC_voidInit+0x4e>
		LOCAL_u32TIMEOUT++;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3301      	adds	r3, #1
 8000818:	607b      	str	r3, [r7, #4]
	while((GET_BIT(RCC_CR,25))==0 && LOCAL_u32TIMEOUT!=10000){
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <RCC_voidInit+0x70>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	0e5b      	lsrs	r3, r3, #25
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d104      	bne.n	8000832 <RCC_voidInit+0x66>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f242 7210 	movw	r2, #10000	; 0x2710
 800082e:	4293      	cmp	r3, r2
 8000830:	d1f0      	bne.n	8000814 <RCC_voidInit+0x48>
#else
	#error "wrong clock system choice!"

#endif

}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40021000 	.word	0x40021000
 8000840:	40021004 	.word	0x40021004

08000844 <RCC_voidEnablePeripheralClock>:
void RCC_voidEnablePeripheralClock(u8 Copy_u8BusID,u8 Copy_u8PeripheralID)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
	/*	Range Check	*/
	if(Copy_u8PeripheralID < 32)
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	2b1f      	cmp	r3, #31
 8000858:	d828      	bhi.n	80008ac <RCC_voidEnablePeripheralClock+0x68>
	{
		switch(Copy_u8BusID)
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d00f      	beq.n	8000880 <RCC_voidEnablePeripheralClock+0x3c>
 8000860:	2b02      	cmp	r3, #2
 8000862:	d018      	beq.n	8000896 <RCC_voidEnablePeripheralClock+0x52>
 8000864:	2b00      	cmp	r3, #0
 8000866:	d000      	beq.n	800086a <RCC_voidEnablePeripheralClock+0x26>
		case RCC_APB1:	SET_BIT(RCC_APB1ENR,Copy_u8PeripheralID);	break;
		case RCC_APB2:	SET_BIT(RCC_APB2ENR,Copy_u8PeripheralID);	break;
		}
	}
	else{/*		Return ERROR	*/}
}
 8000868:	e020      	b.n	80008ac <RCC_voidEnablePeripheralClock+0x68>
		case RCC_AHB:	SET_BIT(RCC_AHBENR,Copy_u8PeripheralID);	break;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <RCC_voidEnablePeripheralClock+0x74>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	79ba      	ldrb	r2, [r7, #6]
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <RCC_voidEnablePeripheralClock+0x74>)
 800087a:	430b      	orrs	r3, r1
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e015      	b.n	80008ac <RCC_voidEnablePeripheralClock+0x68>
		case RCC_APB1:	SET_BIT(RCC_APB1ENR,Copy_u8PeripheralID);	break;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <RCC_voidEnablePeripheralClock+0x78>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	79ba      	ldrb	r2, [r7, #6]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <RCC_voidEnablePeripheralClock+0x78>)
 8000890:	430b      	orrs	r3, r1
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	e00a      	b.n	80008ac <RCC_voidEnablePeripheralClock+0x68>
		case RCC_APB2:	SET_BIT(RCC_APB2ENR,Copy_u8PeripheralID);	break;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <RCC_voidEnablePeripheralClock+0x7c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	79ba      	ldrb	r2, [r7, #6]
 800089c:	2101      	movs	r1, #1
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <RCC_voidEnablePeripheralClock+0x7c>)
 80008a6:	430b      	orrs	r3, r1
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	bf00      	nop
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40021014 	.word	0x40021014
 80008bc:	4002101c 	.word	0x4002101c
 80008c0:	40021018 	.word	0x40021018

080008c4 <STK_voidInit>:


static void (*STK_PfCallBack)(void) = NULL;
static u8 STK_u8IntervalMode;
void STK_voidInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	/*		Processor clock divided by 8			*/
	STK -> CTRL = 0x00000004;
	//CLR_BIT(STK -> CTRL , 2);
#elif	STK_PRESCALLER	==	STK_AHB_DIV_8
	/*		STK Clock = Processor Clock				*/
	STK -> CTRL = 0x00000000;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <STK_voidInit+0x14>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
	//SET_BIT(STK -> CTRL , 2);
#else
	#error "Wrong Choice of SysTick Prescaller!"
#endif

}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010

080008dc <STK_voidIntervalSingle>:
	}
	else
	{	/*		Return ERROR	*/	}
}
void STK_voidIntervalSingle(u32 Copy_u32Ticks,void (*copy_pf)(void))
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	/*		Range check on 24 Bits		*/
	if(Copy_u32Ticks <= 16777216)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008ec:	d814      	bhi.n	8000918 <STK_voidIntervalSingle+0x3c>
	{
		/*		Load Number Of ticks		*/
		STK -> LOAD = Copy_u32Ticks;
 80008ee:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <STK_voidIntervalSingle+0x48>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6053      	str	r3, [r2, #4]
		/*		Start Timer					*/
		SET_BIT(STK -> CTRL,0);
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <STK_voidIntervalSingle+0x48>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <STK_voidIntervalSingle+0x48>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]
		/*		Save CallBack				*/
		STK_PfCallBack = copy_pf;
 8000900:	4a09      	ldr	r2, [pc, #36]	; (8000928 <STK_voidIntervalSingle+0x4c>)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	6013      	str	r3, [r2, #0]
		/*			MODE					*/
		STK_u8IntervalMode = STK_SINGLE_INTERVAL;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <STK_voidIntervalSingle+0x50>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
		/*		Enable  SysTick Interrupt	*/
		SET_BIT(STK -> CTRL , 1);
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <STK_voidIntervalSingle+0x48>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <STK_voidIntervalSingle+0x48>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	6013      	str	r3, [r2, #0]
	}
	else
	{	/*		Return ERROR	*/	}
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010
 8000928:	20000000 	.word	0x20000000
 800092c:	20000022 	.word	0x20000022

08000930 <SysTick_Handler>:
	Local_u32Remaining = STK -> VAL;
	return Local_u32Remaining;
}

void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	u8 Local_u8Temp;
	if(STK_u8IntervalMode == STK_SINGLE_INTERVAL)
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <SysTick_Handler+0x50>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d111      	bne.n	8000962 <SysTick_Handler+0x32>
	{
		/*		Disable Interrupt			*/
		CLR_BIT( STK -> CTRL , 1 );
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <SysTick_Handler+0x54>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <SysTick_Handler+0x54>)
 8000944:	f023 0302 	bic.w	r3, r3, #2
 8000948:	6013      	str	r3, [r2, #0]
		/*		Stop Timer			*/
		CLR_BIT( STK -> CTRL , 0 );
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <SysTick_Handler+0x54>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <SysTick_Handler+0x54>)
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	6013      	str	r3, [r2, #0]
		STK -> LOAD = 0;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <SysTick_Handler+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
		STK -> VAL = 0;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <SysTick_Handler+0x54>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
	}
	/*	Do Whatever you do when Interrupt Fired		*/
	STK_PfCallBack();
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <SysTick_Handler+0x58>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4798      	blx	r3
	/*	Clear the Flag by reading the Flag			*/
	Local_u8Temp = GET_BIT(STK -> CTRL , 16);
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SysTick_Handler+0x54>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	0c1b      	lsrs	r3, r3, #16
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	71fb      	strb	r3, [r7, #7]
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000022 	.word	0x20000022
 8000984:	e000e010 	.word	0xe000e010
 8000988:	20000000 	.word	0x20000000

0800098c <delay_us>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void delay_us(u32 copy_u32time)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	for(u32 i=0;i<copy_u32time;i++)
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e00d      	b.n	80009b6 <delay_us+0x2a>
	{
		for(u16 j=0;j<565;j++)
 800099a:	2300      	movs	r3, #0
 800099c:	817b      	strh	r3, [r7, #10]
 800099e:	e003      	b.n	80009a8 <delay_us+0x1c>
		{
			asm("NOP");
 80009a0:	bf00      	nop
		for(u16 j=0;j<565;j++)
 80009a2:	897b      	ldrh	r3, [r7, #10]
 80009a4:	3301      	adds	r3, #1
 80009a6:	817b      	strh	r3, [r7, #10]
 80009a8:	897b      	ldrh	r3, [r7, #10]
 80009aa:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 80009ae:	d9f7      	bls.n	80009a0 <delay_us+0x14>
	for(u32 i=0;i<copy_u32time;i++)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d3ed      	bcc.n	800099a <delay_us+0xe>
		}
	}
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <ahmed2.4633>:
	ADC_voidResetCalAndCal();
	STK_voidInit();


	void ahmed2(void)
	{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	f8c7 c004 	str.w	ip, [r7, #4]
		static u8 flag = 0;
		if(flag == 0)
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <ahmed2.4633+0x50>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10b      	bne.n	80009f2 <ahmed2.4633+0x2a>
		{
			flag = 1;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <ahmed2.4633+0x50>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]

			LDR=Adc_voidReadADC(CH0,ADC_SampleTime_Cycles_5);
 80009e0:	2104      	movs	r1, #4
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fc28 	bl	8000238 <Adc_voidReadADC>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <ahmed2.4633+0x54>)
 80009ee:	801a      	strh	r2, [r3, #0]

			// inputVoltage = (SIG1) / 4096 * 3;

		}

	}
 80009f0:	e00e      	b.n	8000a10 <ahmed2.4633+0x48>
		else if(flag == 1)
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <ahmed2.4633+0x50>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10a      	bne.n	8000a10 <ahmed2.4633+0x48>
			flag = 0;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <ahmed2.4633+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
			POT=Adc_voidReadADC(CH1,ADC_SampleTime_Cycles_5);
 8000a00:	2104      	movs	r1, #4
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff fc18 	bl	8000238 <Adc_voidReadADC>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <ahmed2.4633+0x58>)
 8000a0e:	801a      	strh	r2, [r3, #0]
	}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000028 	.word	0x20000028
 8000a1c:	20000024 	.word	0x20000024
 8000a20:	20000026 	.word	0x20000026

08000a24 <main>:
{
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
int main(void)
 8000a2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	f107 040c 	add.w	r4, r7, #12
 8000a34:	f107 050c 	add.w	r5, r7, #12
 8000a38:	4b6f      	ldr	r3, [pc, #444]	; (8000bf8 <main+0x1d4>)
 8000a3a:	4626      	mov	r6, r4
 8000a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000a42:	60a5      	str	r5, [r4, #8]
 8000a44:	4b6d      	ldr	r3, [pc, #436]	; (8000bfc <main+0x1d8>)
 8000a46:	60e3      	str	r3, [r4, #12]
 8000a48:	f104 0310 	add.w	r3, r4, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff fb8e 	bl	8000170 <__clear_cache>
	RCC_voidInit();
 8000a54:	f7ff feba 	bl	80007cc <RCC_voidInit>
	RCC_voidEnablePeripheralClock(RCC_APB2, RCC_GPIOA_ID);
 8000a58:	2102      	movs	r1, #2
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f7ff fef2 	bl	8000844 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(RCC_APB2, RCC_ADC_ID);
 8000a60:	2109      	movs	r1, #9
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff feee 	bl	8000844 <RCC_voidEnablePeripheralClock>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN2, DIO_OUTPUT_2MHZ_PP);
 8000a68:	2202      	movs	r2, #2
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fc2d 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN3, DIO_OUTPUT_2MHZ_PP);
 8000a72:	2202      	movs	r2, #2
 8000a74:	2103      	movs	r1, #3
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fc28 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN4, DIO_OUTPUT_2MHZ_PP);
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	2104      	movs	r1, #4
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fc23 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN5, DIO_OUTPUT_2MHZ_PP);
 8000a86:	2202      	movs	r2, #2
 8000a88:	2105      	movs	r1, #5
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fc1e 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN6, DIO_OUTPUT_2MHZ_PP);
 8000a90:	2202      	movs	r2, #2
 8000a92:	2106      	movs	r1, #6
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff fc19 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN7, DIO_OUTPUT_2MHZ_PP);
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	2107      	movs	r1, #7
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fc14 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN8, DIO_OUTPUT_2MHZ_PP);
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fc0f 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN9, DIO_OUTPUT_2MHZ_PP);
 8000aae:	2202      	movs	r2, #2
 8000ab0:	2109      	movs	r1, #9
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff fc0a 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN10, DIO_OUTPUT_2MHZ_PP);
 8000ab8:	2202      	movs	r2, #2
 8000aba:	210a      	movs	r1, #10
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fc05 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN11, DIO_OUTPUT_2MHZ_PP);
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	210b      	movs	r1, #11
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff fc00 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN12, DIO_OUTPUT_2MHZ_PP);
 8000acc:	2202      	movs	r2, #2
 8000ace:	210c      	movs	r1, #12
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fbfb 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN0, DIO_INPUT_ANALOG);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fbf6 	bl	80002cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_U8_PORTA,DIO_U8_PIN1, DIO_INPUT_ANALOG);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fbf1 	bl	80002cc <DIO_voidSetPinDirection>
	LCD_vidInit();
 8000aea:	f7ff fd49 	bl	8000580 <LCD_vidInit>
	ADC_voidInit();
 8000aee:	f7ff fb41 	bl	8000174 <ADC_voidInit>
	ADC_voidEnable();
 8000af2:	f7ff fb5b 	bl	80001ac <ADC_voidEnable>
	ADC_voidMode();
 8000af6:	f7ff fb67 	bl	80001c8 <ADC_voidMode>
	ADC_voidResetCalAndCal();
 8000afa:	f7ff fb73 	bl	80001e4 <ADC_voidResetCalAndCal>
	STK_voidInit();
 8000afe:	f7ff fee1 	bl	80008c4 <STK_voidInit>

	/* Loop forever */
	for(;;)
	{
		LCD_vidClear( );
 8000b02:	f7ff fe1e 	bl	8000742 <LCD_vidClear>
		STK_voidIntervalSingle(10000-1,ahmed2);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f242 700f 	movw	r0, #9999	; 0x270f
 8000b14:	f7ff fee2 	bl	80008dc <STK_voidIntervalSingle>
		LCD_vidGotoXY( 1 , '\0' );
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fe1b 	bl	8000756 <LCD_vidGotoXY>
		itoa(LDR/10,SHOWLDR,10);
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <main+0x1dc>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <main+0x1e0>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	08db      	lsrs	r3, r3, #3
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	220a      	movs	r2, #10
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f000 f8d3 	bl	8000ce4 <itoa>

		LCD_vidWriteString("LDR(volt):");
 8000b3e:	4832      	ldr	r0, [pc, #200]	; (8000c08 <main+0x1e4>)
 8000b40:	f7ff fe28 	bl	8000794 <LCD_vidWriteString>
		LCD_vidWriteString(SHOWLDR);
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fe23 	bl	8000794 <LCD_vidWriteString>
		itoa(LDR%10,SHOWLDR,10);
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <main+0x1dc>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <main+0x1e0>)
 8000b56:	fba3 1302 	umull	r1, r3, r3, r2
 8000b5a:	08d9      	lsrs	r1, r3, #3
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	440b      	add	r3, r1
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	220a      	movs	r2, #10
 8000b70:	4619      	mov	r1, r3
 8000b72:	f000 f8b7 	bl	8000ce4 <itoa>
		LCD_vidWriteString(SHOWLDR);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fe0a 	bl	8000794 <LCD_vidWriteString>
		LCD_vidWriteString(" V");
 8000b80:	4822      	ldr	r0, [pc, #136]	; (8000c0c <main+0x1e8>)
 8000b82:	f7ff fe07 	bl	8000794 <LCD_vidWriteString>





		LCD_vidGotoXY( 2 , '\0' );
 8000b86:	2100      	movs	r1, #0
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fde4 	bl	8000756 <LCD_vidGotoXY>
		itoa(POT/10,SHOWPOT,10);
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <main+0x1ec>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <main+0x1e0>)
 8000b96:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9a:	08db      	lsrs	r3, r3, #3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	220a      	movs	r2, #10
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f000 f89d 	bl	8000ce4 <itoa>

		LCD_vidWriteString("POT(volt):");
 8000baa:	481a      	ldr	r0, [pc, #104]	; (8000c14 <main+0x1f0>)
 8000bac:	f7ff fdf2 	bl	8000794 <LCD_vidWriteString>
		LCD_vidWriteString(SHOWPOT);
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fdee 	bl	8000794 <LCD_vidWriteString>

		itoa(POT%10,SHOWPOT,10);
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <main+0x1ec>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <main+0x1e0>)
 8000bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc4:	08d9      	lsrs	r1, r3, #3
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	440b      	add	r3, r1
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	220a      	movs	r2, #10
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f000 f883 	bl	8000ce4 <itoa>
		LCD_vidWriteString(SHOWPOT);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fdd7 	bl	8000794 <LCD_vidWriteString>
		LCD_vidWriteString(" V");
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <main+0x1e8>)
 8000be8:	f7ff fdd4 	bl	8000794 <LCD_vidWriteString>
		delay_us(1000);
 8000bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf0:	f7ff fecc 	bl	800098c <delay_us>
	{
 8000bf4:	e785      	b.n	8000b02 <main+0xde>
 8000bf6:	bf00      	nop
 8000bf8:	08000d7c 	.word	0x08000d7c
 8000bfc:	080009c9 	.word	0x080009c9
 8000c00:	20000024 	.word	0x20000024
 8000c04:	cccccccd 	.word	0xcccccccd
 8000c08:	08000d8c 	.word	0x08000d8c
 8000c0c:	08000d98 	.word	0x08000d98
 8000c10:	20000026 	.word	0x20000026
 8000c14:	08000d9c 	.word	0x08000d9c

08000c18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c1c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c46:	f000 f811 	bl	8000c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4a:	f7ff feeb 	bl	8000a24 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c5c:	08000dd4 	.word	0x08000dd4
  ldr r2, =_sbss
 8000c60:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c64:	2000002c 	.word	0x2000002c

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <__libc_init_array>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	2500      	movs	r5, #0
 8000c70:	4e0c      	ldr	r6, [pc, #48]	; (8000ca4 <__libc_init_array+0x38>)
 8000c72:	4c0d      	ldr	r4, [pc, #52]	; (8000ca8 <__libc_init_array+0x3c>)
 8000c74:	1ba4      	subs	r4, r4, r6
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	d109      	bne.n	8000c90 <__libc_init_array+0x24>
 8000c7c:	f000 f872 	bl	8000d64 <_init>
 8000c80:	2500      	movs	r5, #0
 8000c82:	4e0a      	ldr	r6, [pc, #40]	; (8000cac <__libc_init_array+0x40>)
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <__libc_init_array+0x44>)
 8000c86:	1ba4      	subs	r4, r4, r6
 8000c88:	10a4      	asrs	r4, r4, #2
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d105      	bne.n	8000c9a <__libc_init_array+0x2e>
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
 8000c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c94:	4798      	blx	r3
 8000c96:	3501      	adds	r5, #1
 8000c98:	e7ee      	b.n	8000c78 <__libc_init_array+0xc>
 8000c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c9e:	4798      	blx	r3
 8000ca0:	3501      	adds	r5, #1
 8000ca2:	e7f2      	b.n	8000c8a <__libc_init_array+0x1e>
 8000ca4:	08000dcc 	.word	0x08000dcc
 8000ca8:	08000dcc 	.word	0x08000dcc
 8000cac:	08000dcc 	.word	0x08000dcc
 8000cb0:	08000dd0 	.word	0x08000dd0

08000cb4 <__itoa>:
 8000cb4:	1e93      	subs	r3, r2, #2
 8000cb6:	2b22      	cmp	r3, #34	; 0x22
 8000cb8:	b510      	push	{r4, lr}
 8000cba:	460c      	mov	r4, r1
 8000cbc:	d904      	bls.n	8000cc8 <__itoa+0x14>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	461c      	mov	r4, r3
 8000cc2:	700b      	strb	r3, [r1, #0]
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	bd10      	pop	{r4, pc}
 8000cc8:	2a0a      	cmp	r2, #10
 8000cca:	d109      	bne.n	8000ce0 <__itoa+0x2c>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	da07      	bge.n	8000ce0 <__itoa+0x2c>
 8000cd0:	232d      	movs	r3, #45	; 0x2d
 8000cd2:	700b      	strb	r3, [r1, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	4421      	add	r1, r4
 8000cda:	f000 f805 	bl	8000ce8 <__utoa>
 8000cde:	e7f1      	b.n	8000cc4 <__itoa+0x10>
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	e7f9      	b.n	8000cd8 <__itoa+0x24>

08000ce4 <itoa>:
 8000ce4:	f7ff bfe6 	b.w	8000cb4 <__itoa>

08000ce8 <__utoa>:
 8000ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cea:	b08b      	sub	sp, #44	; 0x2c
 8000cec:	4605      	mov	r5, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	466e      	mov	r6, sp
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <__utoa+0x78>)
 8000cf4:	f103 0c20 	add.w	ip, r3, #32
 8000cf8:	4637      	mov	r7, r6
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	6859      	ldr	r1, [r3, #4]
 8000cfe:	3308      	adds	r3, #8
 8000d00:	c703      	stmia	r7!, {r0, r1}
 8000d02:	4563      	cmp	r3, ip
 8000d04:	463e      	mov	r6, r7
 8000d06:	d1f7      	bne.n	8000cf8 <__utoa+0x10>
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	791b      	ldrb	r3, [r3, #4]
 8000d0c:	6038      	str	r0, [r7, #0]
 8000d0e:	713b      	strb	r3, [r7, #4]
 8000d10:	1e93      	subs	r3, r2, #2
 8000d12:	2b22      	cmp	r3, #34	; 0x22
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	d904      	bls.n	8000d24 <__utoa+0x3c>
 8000d1a:	7023      	strb	r3, [r4, #0]
 8000d1c:	461c      	mov	r4, r3
 8000d1e:	4620      	mov	r0, r4
 8000d20:	b00b      	add	sp, #44	; 0x2c
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d24:	1e66      	subs	r6, r4, #1
 8000d26:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d2a:	fb02 5510 	mls	r5, r2, r0, r5
 8000d2e:	af0a      	add	r7, sp, #40	; 0x28
 8000d30:	443d      	add	r5, r7
 8000d32:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8000d36:	1c59      	adds	r1, r3, #1
 8000d38:	f806 5f01 	strb.w	r5, [r6, #1]!
 8000d3c:	4605      	mov	r5, r0
 8000d3e:	b968      	cbnz	r0, 8000d5c <__utoa+0x74>
 8000d40:	4622      	mov	r2, r4
 8000d42:	5460      	strb	r0, [r4, r1]
 8000d44:	4423      	add	r3, r4
 8000d46:	1b19      	subs	r1, r3, r4
 8000d48:	1b10      	subs	r0, r2, r4
 8000d4a:	4281      	cmp	r1, r0
 8000d4c:	dde7      	ble.n	8000d1e <__utoa+0x36>
 8000d4e:	7811      	ldrb	r1, [r2, #0]
 8000d50:	7818      	ldrb	r0, [r3, #0]
 8000d52:	f802 0b01 	strb.w	r0, [r2], #1
 8000d56:	f803 1901 	strb.w	r1, [r3], #-1
 8000d5a:	e7f4      	b.n	8000d46 <__utoa+0x5e>
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	e7e2      	b.n	8000d26 <__utoa+0x3e>
 8000d60:	08000da7 	.word	0x08000da7

08000d64 <_init>:
 8000d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d66:	bf00      	nop
 8000d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6a:	bc08      	pop	{r3}
 8000d6c:	469e      	mov	lr, r3
 8000d6e:	4770      	bx	lr

08000d70 <_fini>:
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	bf00      	nop
 8000d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d76:	bc08      	pop	{r3}
 8000d78:	469e      	mov	lr, r3
 8000d7a:	4770      	bx	lr
